// <auto-generated />
using System;
using FlexmodulBackendV2.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FlexmodulBackendV2.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20191118121900_UpdatedMaterialOnHouseType")]
    partial class UpdatedMaterialOnHouseType
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FlexmodulBackendV2.Domain.AdditionalCost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<float>("Price");

                    b.Property<Guid?>("ProductionInformationId");

                    b.HasKey("Id");

                    b.HasIndex("ProductionInformationId");

                    b.ToTable("AdditionalCosts");
                });

            modelBuilder.Entity("FlexmodulBackendV2.Domain.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CompanyName");

                    b.Property<string>("CompanyPostalCode");

                    b.Property<string>("CompanyStreet");

                    b.Property<string>("CompanyTown");

                    b.Property<string>("ContactNumber");

                    b.Property<string>("ContactPerson");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("FlexmodulBackendV2.Domain.FmHouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("HouseTypeId");

                    b.Property<Guid?>("RentalOverviewId");

                    b.Property<int>("SquareMeters");

                    b.HasKey("Id");

                    b.HasIndex("HouseTypeId");

                    b.HasIndex("RentalOverviewId");

                    b.ToTable("FmHouses");
                });

            modelBuilder.Entity("FlexmodulBackendV2.Domain.FmHouseType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("HouseType");

                    b.HasKey("Id");

                    b.ToTable("FmHouseTypes");
                });

            modelBuilder.Entity("FlexmodulBackendV2.Domain.Material", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Category");

                    b.Property<int>("HouseSection");

                    b.Property<string>("Name");

                    b.Property<float>("PricePerUnit");

                    b.Property<string>("Supplier");

                    b.Property<string>("Units");

                    b.HasKey("Id");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("FlexmodulBackendV2.Domain.MaterialOnHouseType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("FmHouseTypeId");

                    b.Property<int>("MaterialAmount");

                    b.Property<Guid>("MaterialId");

                    b.HasKey("Id");

                    b.HasIndex("FmHouseTypeId");

                    b.HasIndex("MaterialId");

                    b.ToTable("MaterialOnHouseTypes");
                });

            modelBuilder.Entity("FlexmodulBackendV2.Domain.ProductionInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CustomerId");

                    b.Property<int?>("ExteriorWalls");

                    b.Property<Guid>("HouseId");

                    b.Property<bool>("IsActive");

                    b.Property<Guid>("LastUpdatedById");

                    b.Property<DateTime>("LastUpdatedDate");

                    b.Property<string>("Note");

                    b.Property<DateTime>("ProductionDate");

                    b.Property<int>("ProductionPrice");

                    b.Property<Guid?>("RentalOverviewId");

                    b.Property<int?>("Ventilation");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("HouseId");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("RentalOverviewId");

                    b.ToTable("ProductionInformations");
                });

            modelBuilder.Entity("FlexmodulBackendV2.Domain.RefreshToken", b =>
                {
                    b.Property<string>("Token")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime>("ExpiryDate");

                    b.Property<bool>("Invalidated");

                    b.Property<string>("JwtId");

                    b.Property<bool>("Used");

                    b.Property<string>("UserId");

                    b.HasKey("Token");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("FlexmodulBackendV2.Domain.Rent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("EndDate");

                    b.Property<float>("InsurancePrice");

                    b.Property<Guid>("ProductionInformationId");

                    b.Property<float>("RentPrice");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("ProductionInformationId");

                    b.ToTable("Rents");
                });

            modelBuilder.Entity("FlexmodulBackendV2.Domain.RentalOverview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("EstimatedPrice");

                    b.Property<int>("PurchaseStatus");

                    b.Property<int>("SetupAddressPostalCode");

                    b.Property<string>("SetupAddressStreet");

                    b.Property<string>("SetupAddressTown");

                    b.HasKey("Id");

                    b.ToTable("RentalOverviews");
                });

            modelBuilder.Entity("FlexmodulBackendV2.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AuthenticationLevel");

                    b.Property<string>("Username")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("FlexmodulBackendV2.Domain.AdditionalCost", b =>
                {
                    b.HasOne("FlexmodulBackendV2.Domain.ProductionInformation")
                        .WithMany("AdditionalCosts")
                        .HasForeignKey("ProductionInformationId");
                });

            modelBuilder.Entity("FlexmodulBackendV2.Domain.FmHouse", b =>
                {
                    b.HasOne("FlexmodulBackendV2.Domain.FmHouseType", "HouseType")
                        .WithMany()
                        .HasForeignKey("HouseTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FlexmodulBackendV2.Domain.RentalOverview")
                        .WithMany("RentedHouses")
                        .HasForeignKey("RentalOverviewId");
                });

            modelBuilder.Entity("FlexmodulBackendV2.Domain.MaterialOnHouseType", b =>
                {
                    b.HasOne("FlexmodulBackendV2.Domain.FmHouseType", "FmHouseType")
                        .WithMany("MaterialsOnHouse")
                        .HasForeignKey("FmHouseTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FlexmodulBackendV2.Domain.Material", "Material")
                        .WithMany("MaterialOnHouseTypes")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FlexmodulBackendV2.Domain.ProductionInformation", b =>
                {
                    b.HasOne("FlexmodulBackendV2.Domain.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FlexmodulBackendV2.Domain.FmHouse", "House")
                        .WithMany()
                        .HasForeignKey("HouseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FlexmodulBackendV2.Domain.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FlexmodulBackendV2.Domain.RentalOverview")
                        .WithMany("ProductionInformation")
                        .HasForeignKey("RentalOverviewId");
                });

            modelBuilder.Entity("FlexmodulBackendV2.Domain.RefreshToken", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("FlexmodulBackendV2.Domain.Rent", b =>
                {
                    b.HasOne("FlexmodulBackendV2.Domain.ProductionInformation", "ProductionInformation")
                        .WithMany("Rents")
                        .HasForeignKey("ProductionInformationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
