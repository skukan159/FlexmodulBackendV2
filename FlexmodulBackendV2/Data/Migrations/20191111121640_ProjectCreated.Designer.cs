// <auto-generated />
using System;
using FlexmodulBackendV2.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FlexmodulBackendV2.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20191111121640_ProjectCreated")]
    partial class ProjectCreated
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FlexmodulAPI.Models.AdditionalCosts", b =>
                {
                    b.Property<int>("AdditionalCostsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<float>("Price");

                    b.Property<int?>("ProductionInformationId");

                    b.HasKey("AdditionalCostsId");

                    b.HasIndex("ProductionInformationId");

                    b.ToTable("AdditionalCosts");
                });

            modelBuilder.Entity("FlexmodulAPI.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyName");

                    b.Property<string>("CompanyPostalCode");

                    b.Property<string>("CompanyStreet");

                    b.Property<string>("CompanyTown");

                    b.Property<string>("ContactNumber");

                    b.Property<string>("ContactPerson");

                    b.HasKey("CustomerId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("FlexmodulAPI.Models.FMHouse", b =>
                {
                    b.Property<int>("FMHouseId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("HouseTypeFMHouseTypeId");

                    b.Property<int?>("RentalOverviewId");

                    b.Property<int>("SquareMeters");

                    b.HasKey("FMHouseId");

                    b.HasIndex("HouseTypeFMHouseTypeId");

                    b.HasIndex("RentalOverviewId");

                    b.ToTable("FMHouse");
                });

            modelBuilder.Entity("FlexmodulAPI.Models.FMHouseType", b =>
                {
                    b.Property<int>("FMHouseTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("HouseType");

                    b.HasKey("FMHouseTypeId");

                    b.ToTable("FMHouseType");
                });

            modelBuilder.Entity("FlexmodulAPI.Models.Material", b =>
                {
                    b.Property<int>("MaterialId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category");

                    b.Property<int>("HouseSection");

                    b.Property<string>("Name");

                    b.Property<float>("PricePerUnit");

                    b.Property<string>("Supplier");

                    b.Property<string>("Units");

                    b.HasKey("MaterialId");

                    b.ToTable("Material");
                });

            modelBuilder.Entity("FlexmodulAPI.Models.MaterialOnHouseType", b =>
                {
                    b.Property<int>("FMHouseTypeId");

                    b.Property<int>("MaterialId");

                    b.Property<int>("MaterialAmount");

                    b.HasKey("FMHouseTypeId", "MaterialId");

                    b.HasIndex("MaterialId");

                    b.ToTable("MaterialOnHouseType");
                });

            modelBuilder.Entity("FlexmodulAPI.Models.ProductionInformation", b =>
                {
                    b.Property<int>("ProductionInformationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId");

                    b.Property<int?>("ExteriorWalls");

                    b.Property<int>("HouseId");

                    b.Property<bool>("IsActive");

                    b.Property<int>("LastUpdatedByUserId");

                    b.Property<DateTime>("LastUpdatedDate");

                    b.Property<string>("Note");

                    b.Property<DateTime>("ProductionDate");

                    b.Property<int>("ProductionPrice");

                    b.Property<int?>("RentalOverviewId");

                    b.Property<int?>("Ventilation");

                    b.HasKey("ProductionInformationId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("HouseId");

                    b.HasIndex("LastUpdatedByUserId");

                    b.HasIndex("RentalOverviewId");

                    b.ToTable("ProductionInformation");
                });

            modelBuilder.Entity("FlexmodulAPI.Models.Rent", b =>
                {
                    b.Property<int>("RentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EndDate");

                    b.Property<int?>("HouseProductionInfoProductionInformationId");

                    b.Property<float>("InsurancePrice");

                    b.Property<float>("RentPrice");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("RentId");

                    b.HasIndex("HouseProductionInfoProductionInformationId");

                    b.ToTable("Rent");
                });

            modelBuilder.Entity("FlexmodulAPI.Models.RentalOverview", b =>
                {
                    b.Property<int>("RentalOverviewId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("EstimatedPrice");

                    b.Property<int>("PurchaseStatus");

                    b.Property<int>("SetupAddressPostalCode");

                    b.Property<string>("SetupAddressStreet");

                    b.Property<string>("SetupAddressTown");

                    b.HasKey("RentalOverviewId");

                    b.ToTable("RentalOverview");
                });

            modelBuilder.Entity("FlexmodulAPI.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthenticationLevel");

                    b.Property<string>("Username")
                        .IsRequired();

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("FlexmodulBackendV2.Domain.RefreshToken", b =>
                {
                    b.Property<string>("Token")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime>("ExpiryDate");

                    b.Property<bool>("Invalidated");

                    b.Property<string>("JwtId");

                    b.Property<bool>("Used");

                    b.Property<string>("UserId");

                    b.HasKey("Token");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("FlexmodulAPI.Models.AdditionalCosts", b =>
                {
                    b.HasOne("FlexmodulAPI.Models.ProductionInformation")
                        .WithMany("AdditionalCosts")
                        .HasForeignKey("ProductionInformationId");
                });

            modelBuilder.Entity("FlexmodulAPI.Models.FMHouse", b =>
                {
                    b.HasOne("FlexmodulAPI.Models.FMHouseType", "HouseType")
                        .WithMany()
                        .HasForeignKey("HouseTypeFMHouseTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FlexmodulAPI.Models.RentalOverview")
                        .WithMany("RentedHouses")
                        .HasForeignKey("RentalOverviewId");
                });

            modelBuilder.Entity("FlexmodulAPI.Models.MaterialOnHouseType", b =>
                {
                    b.HasOne("FlexmodulAPI.Models.FMHouseType", "FMHouseType")
                        .WithMany("MaterialsOnHouse")
                        .HasForeignKey("FMHouseTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FlexmodulAPI.Models.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FlexmodulAPI.Models.ProductionInformation", b =>
                {
                    b.HasOne("FlexmodulAPI.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FlexmodulAPI.Models.FMHouse", "House")
                        .WithMany()
                        .HasForeignKey("HouseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FlexmodulAPI.Models.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FlexmodulAPI.Models.RentalOverview")
                        .WithMany("ProductionInformation")
                        .HasForeignKey("RentalOverviewId");
                });

            modelBuilder.Entity("FlexmodulAPI.Models.Rent", b =>
                {
                    b.HasOne("FlexmodulAPI.Models.ProductionInformation", "HouseProductionInfo")
                        .WithMany()
                        .HasForeignKey("HouseProductionInfoProductionInformationId");
                });

            modelBuilder.Entity("FlexmodulBackendV2.Domain.RefreshToken", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
